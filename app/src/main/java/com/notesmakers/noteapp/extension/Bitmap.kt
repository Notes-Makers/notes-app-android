package com.notesmakers.noteapp.extension

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.util.Base64
import java.io.ByteArrayOutputStream

/***
 * Decode Base64 to Bitmap format
 */
fun String.decodeImage(): Bitmap {
    val byteArray =
        takeIf { isNotBlank() }?.let { Base64.decode(it, Base64.DEFAULT) } ?: Base64.decode(
            errorBitmap,
            Base64.DEFAULT
        )
    return BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
}

const val errorBitmap =
    ""

/***
 * Encode Bitmap to Base64 format
 */
fun Bitmap.encodeImage(): String? {
    val baos = ByteArrayOutputStream()
    compress(Bitmap.CompressFormat.JPEG, 100, baos)
    val b: ByteArray = baos.toByteArray()
    return Base64.encodeToString(b, Base64.DEFAULT)
}